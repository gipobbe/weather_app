// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using weather_app;

namespace weather_app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210905151321_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CurrentForecastWeatherInfo", b =>
                {
                    b.Property<Guid>("CurrentForecastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeatherInfosId")
                        .HasColumnType("uuid");

                    b.HasKey("CurrentForecastsId", "WeatherInfosId");

                    b.HasIndex("WeatherInfosId");

                    b.ToTable("CurrentForecastWeatherInfo");
                });

            modelBuilder.Entity("DailyForecastWeatherInfo", b =>
                {
                    b.Property<Guid>("DailyForecastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeatherInfosId")
                        .HasColumnType("uuid");

                    b.HasKey("DailyForecastsId", "WeatherInfosId");

                    b.HasIndex("WeatherInfosId");

                    b.ToTable("DailyForecastWeatherInfo");
                });

            modelBuilder.Entity("HourlyForecastWeatherInfo", b =>
                {
                    b.Property<Guid>("HourlyForecastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeatherInfosId")
                        .HasColumnType("uuid");

                    b.HasKey("HourlyForecastsId", "WeatherInfosId");

                    b.HasIndex("WeatherInfosId");

                    b.ToTable("HourlyForecastWeatherInfo");
                });

            modelBuilder.Entity("weather_app.Modules.Alerts.Entities.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OneCallForecastId")
                        .HasColumnType("uuid");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OneCallForecastId");

                    b.ToTable("MeteoAlerts");
                });

            modelBuilder.Entity("weather_app.Modules.FeelsLikes.Entities.FeelsLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Day")
                        .HasColumnType("double precision");

                    b.Property<double>("Eve")
                        .HasColumnType("double precision");

                    b.Property<double>("Morn")
                        .HasColumnType("double precision");

                    b.Property<double>("Night")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("FeelsLikes");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.CurrentForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Clouds")
                        .HasColumnType("integer");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("FeelsLike")
                        .HasColumnType("double precision");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer");

                    b.Property<double>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rain")
                        .HasColumnType("double precision");

                    b.Property<double?>("Snow")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Sunrise")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Sunset")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double>("Uvi")
                        .HasColumnType("double precision");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.Property<int>("WindDeg")
                        .HasColumnType("integer");

                    b.Property<double?>("WindGust")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("CurrentForecast");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.DailyForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Clouds")
                        .HasColumnType("double precision");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FeelsLikeId")
                        .HasColumnType("uuid");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<double>("MoonPhase")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Moonrise")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Moonset")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("OneCallForecastId")
                        .HasColumnType("uuid");

                    b.Property<double>("Pop")
                        .HasColumnType("double precision");

                    b.Property<double>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rain")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Sunrise")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Sunset")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TemperatureId")
                        .HasColumnType("uuid");

                    b.Property<double>("Uvi")
                        .HasColumnType("double precision");

                    b.Property<double>("WindDeg")
                        .HasColumnType("double precision");

                    b.Property<double>("WindGust")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FeelsLikeId");

                    b.HasIndex("OneCallForecastId");

                    b.HasIndex("TemperatureId");

                    b.ToTable("DailyForecasts");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.MinutelyForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("OneCallForecastId")
                        .HasColumnType("uuid");

                    b.Property<double>("Precipitation")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OneCallForecastId");

                    b.ToTable("MinutelyForecasts");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.OneCallForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentForecastId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TimezoneOffset")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CurrentForecastId");

                    b.ToTable("OneCallForecasts");
                });

            modelBuilder.Entity("weather_app.Modules.Temperatures.Entities.Temperature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Day")
                        .HasColumnType("double precision");

                    b.Property<double>("Eve")
                        .HasColumnType("double precision");

                    b.Property<double>("Max")
                        .HasColumnType("double precision");

                    b.Property<double>("Min")
                        .HasColumnType("double precision");

                    b.Property<double>("Morn")
                        .HasColumnType("double precision");

                    b.Property<double>("Night")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("weather_app.Modules.Weather.Entities.HourlyForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Clouds")
                        .HasColumnType("double precision");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Dt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("FeelsLike")
                        .HasColumnType("double precision");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("OneCallForecastId")
                        .HasColumnType("uuid");

                    b.Property<double>("Pop")
                        .HasColumnType("double precision");

                    b.Property<double>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double>("Uvi")
                        .HasColumnType("double precision");

                    b.Property<double>("Visibility")
                        .HasColumnType("double precision");

                    b.Property<double>("WindDeg")
                        .HasColumnType("double precision");

                    b.Property<double>("WindGust")
                        .HasColumnType("double precision");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OneCallForecastId");

                    b.ToTable("HourlyForecasts");
                });

            modelBuilder.Entity("weather_app.Modules.WeatherInfos.Entities.WeatherInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Main")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeatherInfos");
                });

            modelBuilder.Entity("CurrentForecastWeatherInfo", b =>
                {
                    b.HasOne("weather_app.Modules.Forecasts.Entities.CurrentForecast", null)
                        .WithMany()
                        .HasForeignKey("CurrentForecastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weather_app.Modules.WeatherInfos.Entities.WeatherInfo", null)
                        .WithMany()
                        .HasForeignKey("WeatherInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DailyForecastWeatherInfo", b =>
                {
                    b.HasOne("weather_app.Modules.Forecasts.Entities.DailyForecast", null)
                        .WithMany()
                        .HasForeignKey("DailyForecastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weather_app.Modules.WeatherInfos.Entities.WeatherInfo", null)
                        .WithMany()
                        .HasForeignKey("WeatherInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HourlyForecastWeatherInfo", b =>
                {
                    b.HasOne("weather_app.Modules.Weather.Entities.HourlyForecast", null)
                        .WithMany()
                        .HasForeignKey("HourlyForecastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("weather_app.Modules.WeatherInfos.Entities.WeatherInfo", null)
                        .WithMany()
                        .HasForeignKey("WeatherInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("weather_app.Modules.Alerts.Entities.Alert", b =>
                {
                    b.HasOne("weather_app.Modules.Forecasts.Entities.OneCallForecast", null)
                        .WithMany("MeteoAlert")
                        .HasForeignKey("OneCallForecastId");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.DailyForecast", b =>
                {
                    b.HasOne("weather_app.Modules.FeelsLikes.Entities.FeelsLike", "FeelsLike")
                        .WithMany()
                        .HasForeignKey("FeelsLikeId");

                    b.HasOne("weather_app.Modules.Forecasts.Entities.OneCallForecast", null)
                        .WithMany("DailyForecasts")
                        .HasForeignKey("OneCallForecastId");

                    b.HasOne("weather_app.Modules.Temperatures.Entities.Temperature", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureId");

                    b.Navigation("FeelsLike");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.MinutelyForecast", b =>
                {
                    b.HasOne("weather_app.Modules.Forecasts.Entities.OneCallForecast", null)
                        .WithMany("MinutelyForecasts")
                        .HasForeignKey("OneCallForecastId");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.OneCallForecast", b =>
                {
                    b.HasOne("weather_app.Modules.Forecasts.Entities.CurrentForecast", "CurrentForecast")
                        .WithMany()
                        .HasForeignKey("CurrentForecastId");

                    b.Navigation("CurrentForecast");
                });

            modelBuilder.Entity("weather_app.Modules.Weather.Entities.HourlyForecast", b =>
                {
                    b.HasOne("weather_app.Modules.Forecasts.Entities.OneCallForecast", null)
                        .WithMany("HourlyForecasts")
                        .HasForeignKey("OneCallForecastId");
                });

            modelBuilder.Entity("weather_app.Modules.Forecasts.Entities.OneCallForecast", b =>
                {
                    b.Navigation("DailyForecasts");

                    b.Navigation("HourlyForecasts");

                    b.Navigation("MeteoAlert");

                    b.Navigation("MinutelyForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
